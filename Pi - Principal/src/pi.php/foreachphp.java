/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package php;

import php.*;
import php.*;
import php.*;
import php.*;

/**
 *
 * @author ALUNO
 */
public class foreachphp extends javax.swing.JFrame {

    /**
     * Creates new form ifphp
     */
    public foreachphp() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton3.setText(">");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 500, -1, 80));

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton2.setText("<");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, -1, 80));

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setText("Voltar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 920, 90, 30));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("PHP");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 100, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("foreach");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 160, -1, -1));

        jTextArea2.setColumns(20);
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jTextArea2.setText("     O construtor foreach fornece uma maneira fácil de iterar sobre arrays. O foreach funciona somente em arrays e objetos, e emitirá um erro ao tentar usá-lo em uma variável com um tipo de dado diferente ou em uma variável não inicializada. Possui duas sintaxes:\n\n  foreach (iterable_expression as $valor)\n      statement\n foreach (iterable_expression as $chave => $valor)\n     statement\n\n    A primeira forma percorre o iterável dado por iterable_expression. A cada iteração, o valor do elemento atual é atribuído a $valor.\n\n    A segunda forma var, adicionalmente, atribuir a chave do elemento corrente a variável $chave a cada iteração.\n\n\n   Note que o foreach não modifica o ponteiro interno do array, que é usado por funções como current() e key().\n\n   É possível customizar a iteração em objetos.\n\n   Para modificar diretamente elementos de um array dentro de um laço, preceda $valor com &. Neste caso, o valor será atribuído por referência.\n\n  <?php\n  $arr = array(1, 2, 3, 4);\n  foreach ($arr as &$valor) {\n     $valor = $valor * 2;\n }\n // $arr is now array(2, 4, 6, 8)\n unset($valor); // quebra a referência com o último elemento\n ?>\n\n    (Aviso)\n\n   A referência ao $valor e o último elemento do array permanecerá inalterado mesmo após a iteração do foreach. É recomendado destruí-lo utilizando a função unset(). Caso contrário você experienciará o seguinte comportamento:\n\n  <?php\n  $arr = array(1, 2, 3, 4);\n  foreach ($arr as &$valor) {\n     $valor = $valor * 2;\n  }\n  // $arr agora é array(2, 4, 6, 8)\n\n // sem um unset($valor), $valor continuará como referência ao último item: $arr[3]\n\n foreach ($arr as $chave => $valor) {\n     // $arr[3] será atualizado com cada valor de $arr...\n     echo \"{$chave} => {$valor} \";\n     print_r($arr);\n }\n \n // ...até que, o segundo e último valor é copiado para o último valor\n\n // saída:\n // 0 => 2 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 2 )\n // 1 => 4 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 4 )\n // 2 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )\n // 3 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )\n ?>\n\n É possível iterar o valor de um array constante por referência\n\n <?php\n foreach (array(1, 2, 3, 4) as &$valor) {\n     $valor = $valor * 2;\n }\n ?>\n\n  \n  Nota:\n\n   O foreach não possui suporte a habilidade de suprimir mensagens de erro utilizando @.\n\n   Mais alguns exemplos para demonstrar o uso:\n\n <?php\n \n /* foreach example 1: value only */\n\n $a = array(1, 2, 3, 17);\n\n foreach ($a as $v) {\n     echo \"Current value of \\$a: $v.\\n\";\n }\n\n /* foreach example 2: value (with its manual access notation printed for illus tration) */\n\n $a = array(1, 2, 3, 17);\n\n $i = 0; /* for illustrative purposes only */\n\n foreach ($a as $v) {\n     echo \"\\$a[$i] => $v.\\n\";\n     $i++;\n }\n\n  /* foreach example 3: key and value */\n\n  $a = array(\n      \"one\" => 1,\n      \"two\" => 2,\n      \"three\" => 3,\n      \"seventeen\" => 17\n  );\n\n  foreach ($a as $k => $v) {\n    echo \"\\$a[$k] => $v.\\n\";\n}\n\n  /* foreach example 4: multi-dimensional arrays */\n  $a = array();\n  $a[0][0] = \"a\";\n  $a[0][1] = \"b\";\n  $a[1][0] = \"y\";\n  $a[1][1] = \"z\";\n\n foreach ($a as $v1) {\n     foreach ($v1 as $v2) {\n         echo \"$v2\\n\";\n     }\n }\n\n  /* foreach example 5: dynamic arrays */\n\n  foreach (array(1, 2, 3, 4, 5) as $v) {\n      echo \"$v\\n\";\n }\n ?>\n\n  Desempacotando arrays aninhados com o construtor list() ¶\n (PHP 5 >= 5.5.0, PHP 7, PHP 8)\n\n   É possível iterar sobre um array de arrays e desempacotar arrays aninhados em variáveis do laço fornecendo o construtor list() como valor.\n\n  Por exemplo:\n\n  <?php\n  $array = [\n     [1, 2],\n     [3, 4],\n ];\n\n foreach ($array as list($a, $b)) {\n     // $a contém o primeiro elemento do array aninhado,\n     // e $b contém o segundo elemento.\n     echo \"A: $a; B: $b\\n\";\n }\n ?>\n\n  O exemplo acima irá imprimir:\n\n A: 1; B: 2\n A: 3; B: 4\n\n   Pode-se se fornecer menos elementos ao construtor list() aos que existem no array aninhado, neste caso, os valores do array que sobrarem serão ignorados.\n\n <?php\n $array = [\n     [1, 2],\n     [3, 4],\n ];\n\n foreach ($array as list($a)) {\n     // Note that there is no $b here.\n     echo \"$a\\n\";\n }\n ?>\n\n   O exemplo acima irá imprimir:\n\n 1\n 3\n\n  Um aviso será gerado se não houver elementos suficientes no array para o preenchimento do construtor list():\n\n <?php\n $array = [\n     [1, 2],\n     [3, 4],\n ];\n\n foreach ($array as list($a, $b, $c)) {\n     echo \"A: $a; B: $b; C: $c\\n\";\n }\n ?>\n \n  O exemplo acima irá imprimir:\n\n\n Notice: Undefined offset: 2 in example.php on line 7\n A: 1; B: 2; C:\n\n Notice: Undefined offset: 2 in example.php on line 7\n A: 3; B: 4; C:");
        jScrollPane2.setViewportView(jTextArea2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 260, 660, 540));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Tapet-navy-silver.jpg"))); // NOI18N
        jLabel4.setText("jLabel4");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // voltar
        
         this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // tela while php
        
        new Whilephp().setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // tela for php
        
        new forphp().setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(foreachphp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(foreachphp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(foreachphp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(foreachphp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new foreachphp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
